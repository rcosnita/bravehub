---
- name: Setup awscli.
  include_role:
    name: aws
    tasks_from: awscli-configure

- name: Determine the swarm master hostname.
  include_role:
    name: shared-storage-setup
    tasks_from: server-hostname
  vars:
    SERVER_HOSTNAME_LOCK_FILE: "{{provisioning_storage}}/swarm-master.lock"
    SERVER_HOSTNAME_FILE: "{{docker.docker_home}}/swarm-master-hostname"
    SERVER_MAX_INSTANCES: "{{docker.swarm.master.max_masters}}"
    SERVER_INVENTORY_FILE: "{{provisioning_storage}}/swarm-masters.json"
    SERVER_NAME_PATTERN: "{{docker.swarm.master.pattern}}.{{API_ZONE_NAME_STR}}"

- set_fact:
    SWARM_MASTER_HOSTNAME: "{{SERVER_HOSTNAME}}"
    SWARM_FIRST_MASTER: "{{docker.swarm.master.first_master}}.{{API_ZONE_NAME_STR}}"
    SWARM_TOKEN_LOCATION:  "{{provisioning_storage}}/swarm-token"
    SWARM_WORKER_TOKEN_LOCATION: "{{provisioning_storage}}/swarm-token-worker"

- name: Initialize the swarm.
  become: yes
  become_user: root
  become_method: sudo
  shell: |
    docker swarm init --advertise-addr {{HOST_IP_STR}}
  when: SWARM_MASTER_HOSTNAME == SWARM_FIRST_MASTER
  ignore_errors: yes

- name: Store swarm master dns entry.
  include_role:
    name: aws
    tasks_from: aws-setrecord.yml
  vars:
    DOMAIN_NAME: "{{SWARM_MASTER_HOSTNAME}}"

- name: Persist the join command for following masters.
  become: yes
  become_user: root
  become_method: sudo
  shell: |
    docker swarm join-token manager --quiet > {{SWARM_TOKEN_LOCATION}}
  when: SWARM_MASTER_HOSTNAME == SWARM_FIRST_MASTER

- name: Persist the join command for the workers.
  become: yes
  become_user: root
  become_method: sudo
  shell: |
    docker swarm join-token worker --quiet > {{SWARM_WORKER_TOKEN_LOCATION}}
  when: SWARM_MASTER_HOSTNAME == SWARM_FIRST_MASTER

- name: Wait for swarm master to finish.
  include_role:
    name: swarm-master
    tasks_from: wait-master
  vars:
    SWARM_MASTER: "{{SWARM_FIRST_MASTER}}"

- name: Join an existing swarm.
  become: yes
  become_user: root
  become_method: sudo
  shell: |
    docker swarm join \
      --token $(cat {{SWARM_TOKEN_LOCATION}}) \
      {{SWARM_FIRST_MASTER}}:2377
  ignore_errors: yes
  when: SWARM_MASTER_HOSTNAME != SWARM_FIRST_MASTER

- name: Drain the current master.
  become: yes
  become_user: root
  become_method: sudo
  shell: |
    docker node update --availability drain \
      $(docker node ls --filter name=$(hostname) | awk '{print $1}' | tail -n+2)

# Unfortunately we can not install portainer on all masters because of Bolt database.
# See https://github.com/portainer/portainer/issues/1432 for more details.
- name: Install portainer manager.
  include_role:
    name: portainer
  when: SWARM_MASTER_HOSTNAME == SWARM_FIRST_MASTER
